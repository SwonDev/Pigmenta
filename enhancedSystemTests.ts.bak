/**
 * Enhanced System Tests
 * Comprehensive tests for the improved AI color generation system
 */

import { SemanticAnalyzer } from '../utils/semanticAnalyzer';
import { AIColorEngine } from '../utils/aiColorEngine';

interface TestCase {
  name: string;
  prompt: string;
  expectedLanguage: 'en' | 'es' | 'mixed';
  expectedColorCount: number;
  minConfidence: number;
  shouldDetectCompounds?: boolean;
  notes?: string;
}

const testCases: TestCase[] = [
  // ENGLISH TESTS
  {
    name: 'Simple English - Ocean Theme',
    prompt: 'ocean blue peaceful website',
    expectedLanguage: 'en',
    expectedColorCount: 1,
    minConfidence: 0.7,
    shouldDetectCompounds: true,
    notes: 'Should detect "ocean blue" as compound concept'
  },
  {
    name: 'Complex English - Luxury Brand',
    prompt: 'luxury brand with elegant gold accents and modern minimalist design',
    expectedLanguage: 'en',
    expectedColorCount: 1,
    minConfidence: 0.8,
    shouldDetectCompounds: true,
    notes: 'Should detect "modern minimalist" compound and synonyms for gold'
  },
  {
    name: 'English Typo - Fuzzy Match',
    prompt: 'oceanic vibes with turquise colors',
    expectedLanguage: 'en',
    expectedColorCount: 2,
    minConfidence: 0.6,
    notes: 'Should fuzzy match "oceanic"‚Üí"ocean" and "turquise"‚Üí"turquoise"'
  },
  {
    name: 'English Synonyms',
    prompt: 'crimson and ruby tones for bold confident brand',
    expectedLanguage: 'en',
    expectedColorCount: 2,
    minConfidence: 0.7,
    notes: 'Should expand "crimson" and "ruby" to red variants'
  },

  // SPANISH TESTS
  {
    name: 'Simple Spanish - Sunset Theme',
    prompt: 'atardecer naranja c√°lido y acogedor',
    expectedLanguage: 'es',
    expectedColorCount: 1,
    minConfidence: 0.7,
    shouldDetectCompounds: true,
    notes: 'Should detect "naranja atardecer" compound'
  },
  {
    name: 'Complex Spanish - Professional',
    prompt: 'marca profesional corporativa con tonos azul marino y gris elegante',
    expectedLanguage: 'es',
    expectedColorCount: 2,
    minConfidence: 0.8,
    shouldDetectCompounds: true,
    notes: 'Should detect "profesional corporativo" and "azul marino" compounds'
  },
  {
    name: 'Spanish Synonyms',
    prompt: 'colores carmes√≠ y escarlata para dise√±o audaz',
    expectedLanguage: 'es',
    expectedColorCount: 2,
    minConfidence: 0.7,
    notes: 'Should expand "carmes√≠" and "escarlata" to rojo variants'
  },

  // MIXED LANGUAGE TESTS
  {
    name: 'Mixed - Tech Startup',
    prompt: 'tech startup moderna con vibrant blue y energ√≠a profesional',
    expectedLanguage: 'mixed',
    expectedColorCount: 1,
    minConfidence: 0.6,
    notes: 'Should handle code-switching between English and Spanish'
  },
  {
    name: 'Mixed - E-commerce',
    prompt: 'e-commerce platform with colores c√°lidos y friendly design',
    expectedLanguage: 'mixed',
    expectedColorCount: 1,
    minConfidence: 0.6,
    notes: 'Should detect mixed language and extract colors from both'
  },

  // EDGE CASES
  {
    name: 'No Colors - Abstract Only',
    prompt: 'modern professional sophisticated elegant',
    expectedLanguage: 'en',
    expectedColorCount: 0,
    minConfidence: 0.5,
    notes: 'No explicit colors, should rely on emotional associations'
  },
  {
    name: 'Multiple Compounds',
    prompt: 'sunset orange, ocean blue, forest green nature-inspired palette',
    expectedLanguage: 'en',
    expectedColorCount: 3,
    minConfidence: 0.8,
    shouldDetectCompounds: true,
    notes: 'Should detect all three compound color concepts'
  },
  {
    name: 'Industry-Specific',
    prompt: 'healthcare app with calm serene trustworthy colors',
    expectedLanguage: 'en',
    expectedColorCount: 0,
    minConfidence: 0.6,
    notes: 'Should detect healthcare industry and emotional tone'
  },
];

export function runEnhancedSystemTests(): void {
  console.log('üß™ ENHANCED SYSTEM TESTS\n');
  console.log('='.repeat(80));

  let passed = 0;
  let failed = 0;
  const failures: { test: string; reason: string }[] = [];

  testCases.forEach((testCase, index) => {
    console.log(`\n[${index + 1}/${testCases.length}] ${testCase.name}`);
    console.log(`Prompt: "${testCase.prompt}"`);
    console.log(`Expected: ${testCase.expectedLanguage} | Colors: ${testCase.expectedColorCount} | Min Confidence: ${testCase.minConfidence}`);

    try {
      const analysis = SemanticAnalyzer.analyze(testCase.prompt);

      // Check language detection
      const languageMatch = analysis.language === testCase.expectedLanguage;
      console.log(`‚úì Language: ${analysis.language} ${languageMatch ? '‚úì' : '‚úó EXPECTED: ' + testCase.expectedLanguage}`);

      // Check color count
      const colorMatch = analysis.colors.length >= testCase.expectedColorCount;
      console.log(`‚úì Colors detected: ${analysis.colors.length} ${colorMatch ? '‚úì' : '‚úó EXPECTED: >= ' + testCase.expectedColorCount}`);

      // Show detected colors with weights
      if (analysis.colors.length > 0) {
        console.log('  Detected colors:');
        analysis.colors.slice(0, 5).forEach(color => {
          console.log(`    - ${color.originalTerm} (${color.matchType}, weight: ${color.weight.toFixed(2)})`);
        });
      }

      // Check confidence
      const confidenceMatch = analysis.confidence >= testCase.minConfidence;
      console.log(`‚úì Confidence: ${analysis.confidence.toFixed(2)} ${confidenceMatch ? '‚úì' : '‚úó EXPECTED: >= ' + testCase.minConfidence}`);

      // Check compound detection
      if (testCase.shouldDetectCompounds) {
        const hasCompounds = (analysis.compoundConcepts?.length ?? 0) > 0;
        console.log(`‚úì Compound concepts: ${analysis.compoundConcepts?.join(', ') || 'none'} ${hasCompounds ? '‚úì' : '‚úó EXPECTED: some'}`);
      }

      // Overall result
      const testPassed = languageMatch && colorMatch && confidenceMatch;
      if (testPassed) {
        passed++;
        console.log('‚úÖ PASSED');
      } else {
        failed++;
        const reasons = [];
        if (!languageMatch) reasons.push('language mismatch');
        if (!colorMatch) reasons.push('insufficient colors');
        if (!confidenceMatch) reasons.push('low confidence');
        failures.push({ test: testCase.name, reason: reasons.join(', ') });
        console.log(`‚ùå FAILED: ${reasons.join(', ')}`);
      }

      if (testCase.notes) {
        console.log(`üìù Note: ${testCase.notes}`);
      }

    } catch (error) {
      failed++;
      failures.push({ test: testCase.name, reason: `Error: ${error}` });
      console.log(`‚ùå ERROR: ${error}`);
    }
  });

  console.log('\n' + '='.repeat(80));
  console.log(`\nüìä RESULTS: ${passed}/${testCases.length} passed (${((passed / testCases.length) * 100).toFixed(1)}%)`);

  if (failures.length > 0) {
    console.log('\n‚ùå FAILURES:');
    failures.forEach(f => console.log(`  - ${f.test}: ${f.reason}`));
  }

  console.log('\n' + '='.repeat(80));
}

export function testFullPaletteGeneration(): void {
  console.log('\n\nüé® FULL PALETTE GENERATION TESTS\n');
  console.log('='.repeat(80));

  const paletteTests = [
    {
      name: 'English - Ocean Corporate',
      prompt: 'corporate website with ocean blue professional tone',
    },
    {
      name: 'Spanish - Sunset Creative',
      prompt: 'dise√±o creativo con colores de atardecer c√°lidos y vibrantes',
    },
    {
      name: 'Mixed - Tech Startup',
      prompt: 'tech startup moderna with vibrant energetic colors and professional feel',
    },
    {
      name: 'English - Luxury Brand',
      prompt: 'luxury brand elegant sophisticated with gold and deep purple accents',
    },
    {
      name: 'Spanish - Nature Organic',
      prompt: 'marca org√°nica natural con tonos tierra y verde bosque',
    },
  ];

  paletteTests.forEach((test, index) => {
    console.log(`\n[${index + 1}/${paletteTests.length}] ${test.name}`);
    console.log(`Prompt: "${test.prompt}"`);

    try {
      const palette = AIColorEngine.generatePalette(test.prompt);

      console.log('\nüìä Analysis:');
      console.log(`  Language: ${palette.metadata.language}`);
      console.log(`  Confidence: ${palette.metadata.confidence?.toFixed(2) || 'N/A'}`);
      console.log(`  Emotions: ${palette.metadata.emotions.join(', ')}`);
      console.log(`  Industry: ${palette.metadata.industry || 'general'}`);
      if (palette.metadata.compoundConcepts?.length) {
        console.log(`  Compounds: ${palette.metadata.compoundConcepts.join(', ')}`);
      }
      if (palette.metadata.colorMatches?.length) {
        console.log(`  Color Matches:`);
        palette.metadata.colorMatches.slice(0, 3).forEach((match: any) => {
          console.log(`    - ${match.term} (${match.matchType}, ${match.weight.toFixed(2)})`);
        });
      }

      console.log('\nüé® Generated Palette:');
      console.log(`  Primary:    hsl(${palette.colors.primary.h}, ${palette.colors.primary.s}%, ${palette.colors.primary.l}%)`);
      console.log(`  Secondary:  hsl(${palette.colors.secondary.h}, ${palette.colors.secondary.s}%, ${palette.colors.secondary.l}%)`);
      console.log(`  Accent:     hsl(${palette.colors.accent.h}, ${palette.colors.accent.s}%, ${palette.colors.accent.l}%)`);
      console.log(`  Background: hsl(${palette.colors.background.h}, ${palette.colors.background.s}%, ${palette.colors.background.l}%)`);
      console.log(`  Text:       hsl(${palette.colors.text.h}, ${palette.colors.text.s}%, ${palette.colors.text.l}%)`);

      console.log('\n‚úÖ Palette generated successfully');

    } catch (error) {
      console.log(`\n‚ùå ERROR: ${error}`);
    }
  });

  console.log('\n' + '='.repeat(80));
}

// Run all tests
if (typeof window === 'undefined') {
  // Node environment
  runEnhancedSystemTests();
  testFullPaletteGeneration();
} else {
  // Browser environment - expose to window for manual testing
  (window as any).runEnhancedSystemTests = runEnhancedSystemTests;
  (window as any).testFullPaletteGeneration = testFullPaletteGeneration;
}
